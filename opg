#! /usr/bin/ruby
require 'ostruct'
require 'erb'
require 'pathname'

def usage
  $stderr.puts "usage: #{$0} foo.opts\n"
  $stderr.puts "Generates foo.h and foo.c"
  exit 1
end
usage if ARGV.empty? or ARGV[0] == '-h' or ARGV[0] == '--help'

input = Pathname.new ARGV[0]
usage unless input.exist?
path = input.dirname
input.basename.to_s =~ /(\.[^.]+)$/
ext = $1
header = path + "#{input.basename(ext)}.h"
source = path + "#{input.basename(ext)}.c"

opts = []
input = input.read
input.each_line do |line|
  line.chomp!
  next unless line =~ /^-/
  short, long, type, help = line.split($;, 4)
  raise "Bad short name '#{short}'" unless short =~ /^-(\w)$/
  short = $1
  raise "Bad long name '#{long}'" unless long =~ /^--(\w+)(=(\w+))?$/
  long = $1
  param = $3
  raise "Bad type '#{type}'" unless type =~ /^(char\*|int|float|bool)(\?)?$/
  required = $2.nil?
  type = type[0..-2] unless required
  opts.push OpenStruct.new(:short => short, :long => long, :param => param,
                           :tipe => type, :required => required, :help => help)
end

header_template = <<-EOF
/* This file is automatically generated by opg */
#ifndef _OPG_H
#define _OPG_H

struct options {
<% opts.each do |o| 
     t = o.tipe
     t = 'int' if t == 'bool' %>
    <%= sprintf("%-5s", t) %> <%= o.short %>; /* <%= o.long %> */
<% end %>
};

/* Print usage and exit(1) */
void usage(void);

/* Parse options, populate opts, adjust argc/argv */
void parse_options(int *argc, char * const **argv, struct options *opts);

#endif
EOF

source_template = <<-EOF
/* This file is automatically generated by opg */
#include "#{header.basename}"

#include <getopt.h>
#include <string.h>
#include <inttypes.h>
#include <stdlib.h>

void usage(void)
{
<% 
longest = opts.map{|o| o.long.size + (o.param ? o.param.size : 0)}.max + 5
input.each_line do |line|
  if line =~ /^-(.)/ and (o = opts.find {|o| o.short == $1})
    short = "-\#{o.short}"
    long = "--\#{o.long}"
    long += (o.required ? "=\#{o.param}" : "[=\#{o.param}]") if o.tipe != 'bool'
    help = o.help
    msg = sprintf("  %s  %-\#{longest}s  %s", short, long, help) %>
    puts("<%= msg %>");
<% else %>
    puts("<%= line.chomp %>");
<% end; end %>

    exit(1);
}

void parse_options(int *argc, char * const **argv, struct options *opts)
{
    struct option longopts[] = {
<% opts.each do |o|
    arg = 'optional_argument'
    arg = 'required_argument' if o.required
    arg = 'no_argument' if o.tipe == 'bool'
%>
        { "<%= o.long %>", <%= arg %>, 0, '<%= o.short %>' },
<% end %>
        {0,0,0,0}
    };

<% optstring = opts.map{|o| o.short + (o.tipe == 'bool' ? "" : 
                                         (o.required ? ":" : "::"))}.join %>
    int ch;
    while ((ch = getopt_long(*argc, *argv, "h<%= optstring %>", longopts, 0)) != -1)
    {
        switch (ch) {
        case 'h':
            usage();
            break;

<% opts.each do |o| %>
        case '<%= o.short %>':
<%   case o.tipe
     when 'float' %>
            if (optarg == 0)
                opts-><%= o.short %> = 0;
            else
                opts-><%= o.short %> = strtof(optarg, 0);
<%   when 'int' %>
            if (optarg == 0)
                opts-><%= o.short %> = 0;
            else
                opts-><%= o.short %> = strtol(optarg, 0, 0);
<%   when 'char*' %>
            if (optarg == 0)
                opts-><%= o.short %> = 0;
            else
            {
                opts-><%= o.short %> = malloc(strlen(optarg)+1);
                strncpy(opts-><%= o.short %>, optarg, strlen(optarg));
            }
<%   when 'bool' %>
            opts-><%= o.short %> = 1;
<%   else 
       raise "Shouldn't happen"
     end %>
            break;

<% end %>
        default:
            usage();
        }
    }
    *argc -= optind;
    *argv += optind;
}
EOF

header_template = ERB.new(header_template,nil,'>')
source_template = ERB.new(source_template,nil,'>')
header.open('w') {|h| h.puts header_template.result(binding)}
source.open('w') {|c| c.puts source_template.result(binding)}

=begin
    Copyright (C) 2008  Hans Fugal <hans@fugal.net>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
=end
